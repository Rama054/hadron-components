@import "partials/variables";

.q-sidebar-root {
    $positions: left, right, top, bottom;

    @each $pos in $positions {
        &[data-position="#{$pos}"] {
            .q-sidebar {
                position: fixed;
                z-index: 1000;
                background-color: var(--background-sidebar, var(--#{$prefix}surface-bg));
                transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);

                @if $pos ==left or $pos ==right {
                    width: var(--sidebar-size);
                    height: 100vh;
                    #{$pos}: calc(var(--sidebar-size) * -1);
                    top: 0;
                    //border-#{if($pos == left, right, left)}: 1px solid var(--#{$prefix}border-color);
                    box-shadow: #{if($pos == left, '4px 0 6px -1px', '-4px 0 6px -1px')} var(--#{$prefix}shadow);
                }

                @else if $pos ==top or $pos ==bottom {
                    width: 100vw;
                    height: var(--sidebar-size);
                    #{$pos}: calc(var(--sidebar-size) * -1);
                    left: 0;
                    border-#{if($pos == top, bottom, top)}: 1px solid var(--#{$prefix}border-color);
                    box-shadow: #{if($pos == top, '0 4px 6px -1px', '0 -4px 6px -1px')} var(--#{$prefix}shadow);
                }
            }

            &[data-open="true"] {
                .q-sidebar {
                    #{$pos}: 0;
                }

                .q-sidebar-overlay {
                    opacity: 1;
                    pointer-events: auto;
                }
            }

            &[data-open="false"] {
                .q-sidebar-overlay {
                    opacity: 0;
                    pointer-events: none;
                }
            }
        }
    }
}

.q-sidebar-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 999;
    backdrop-filter: blur(2px);
}

.q-sidebar {
    position: relative;
    box-sizing: border-box;
    background-color: var(--background-sidebar, var(--#{$prefix}surface-bg));
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.q-sidebar-content {
    flex: 1;
    //padding: 1.5rem;
    overflow-y: auto;
    overflow-x: hidden;

    // Custom scrollbar
    &::-webkit-scrollbar {
        width: 6px;
    }

    &::-webkit-scrollbar-track {
        background: var(--#{$prefix}border-light);
    }

    &::-webkit-scrollbar-thumb {
        background: var(--#{$prefix}text-muted);
        border-radius: 3px;

        &:hover {
            background: var(--#{$prefix}color);
        }
    }
}

.q-sidebar-close {
    position: absolute !important;
    top: 1rem;
    right: 1rem;
    z-index: 10;

    svg {
        color: var(--#{$prefix}color);
    }

    &:hover svg {
        color: var(--#{$prefix}color-danger);
    }
}

// Dark mode adjustments
[data-theme="dark"] {
    .q-sidebar {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
    }

    .q-sidebar-overlay {
        background-color: rgba(0, 0, 0, 0.7);
    }
}

// Animation for mobile
@media (max-width: 768px) {

    .q-sidebar-root[data-position="left"] .q-sidebar,
    .q-sidebar-root[data-position="right"] .q-sidebar {
        width: min(var(--sidebar-size), 90vw);
    }

    .q-sidebar-root[data-position="top"] .q-sidebar,
    .q-sidebar-root[data-position="bottom"] .q-sidebar {
        height: min(var(--sidebar-size), 90vh);
    }
}